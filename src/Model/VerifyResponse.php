<?php
/**
 * VerifyResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Kickbox
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kickbox
 *
 * Kickbox API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Kickbox\Model;

use \ArrayAccess;
use \Kickbox\ObjectSerializer;

/**
 * VerifyResponse Class Doc Comment
 *
 * @category Class
 * @package     Kickbox
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VerifyResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VerifyResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'result' => 'string',
        'reason' => 'string',
        'role' => 'bool',
        'free' => 'bool',
        'disposable' => 'bool',
        'accept_all' => 'bool',
        'did_you_mean' => 'string',
        'sendex' => 'float',
        'email' => 'string',
        'user' => 'string',
        'domain' => 'string',
        'message' => 'string',
        'success' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'result' => null,
        'reason' => null,
        'role' => null,
        'free' => null,
        'disposable' => null,
        'accept_all' => null,
        'did_you_mean' => null,
        'sendex' => 'float',
        'email' => null,
        'user' => null,
        'domain' => null,
        'message' => null,
        'success' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'result' => 'result',
        'reason' => 'reason',
        'role' => 'role',
        'free' => 'free',
        'disposable' => 'disposable',
        'accept_all' => 'accept_all',
        'did_you_mean' => 'did_you_mean',
        'sendex' => 'sendex',
        'email' => 'email',
        'user' => 'user',
        'domain' => 'domain',
        'message' => 'message',
        'success' => 'success'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'result' => 'setResult',
        'reason' => 'setReason',
        'role' => 'setRole',
        'free' => 'setFree',
        'disposable' => 'setDisposable',
        'accept_all' => 'setAcceptAll',
        'did_you_mean' => 'setDidYouMean',
        'sendex' => 'setSendex',
        'email' => 'setEmail',
        'user' => 'setUser',
        'domain' => 'setDomain',
        'message' => 'setMessage',
        'success' => 'setSuccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'result' => 'getResult',
        'reason' => 'getReason',
        'role' => 'getRole',
        'free' => 'getFree',
        'disposable' => 'getDisposable',
        'accept_all' => 'getAcceptAll',
        'did_you_mean' => 'getDidYouMean',
        'sendex' => 'getSendex',
        'email' => 'getEmail',
        'user' => 'getUser',
        'domain' => 'getDomain',
        'message' => 'getMessage',
        'success' => 'getSuccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESULT_DELIVERABLE = 'deliverable';
    const RESULT_UNDELIVERABLE = 'undeliverable';
    const RESULT_RISKY = 'risky';
    const RESULT_UNKNOWN = 'unknown';
    const REASON_INVALID_EMAIL = 'invalid_email';
    const REASON_INVALID_DOMAIN = 'invalid_domain';
    const REASON_REJECTED_EMAIL = 'rejected_email';
    const REASON_ACCEPTED_EMAIL = 'accepted_email';
    const REASON_LOW_QUALITY = 'low_quality';
    const REASON_LOW_DELIVERABILITY = 'low_deliverability';
    const REASON_NO_CONNECT = 'no_connect';
    const REASON_TIMEOUT = 'timeout';
    const REASON_INVALID_SMTP = 'invalid_smtp';
    const REASON_UNAVAILABLE_SMTP = 'unavailable_smtp';
    const REASON_UNEXPECTED_ERROR = 'unexpected_error';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_DELIVERABLE,
            self::RESULT_UNDELIVERABLE,
            self::RESULT_RISKY,
            self::RESULT_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_INVALID_EMAIL,
            self::REASON_INVALID_DOMAIN,
            self::REASON_REJECTED_EMAIL,
            self::REASON_ACCEPTED_EMAIL,
            self::REASON_LOW_QUALITY,
            self::REASON_LOW_DELIVERABILITY,
            self::REASON_NO_CONNECT,
            self::REASON_TIMEOUT,
            self::REASON_INVALID_SMTP,
            self::REASON_UNAVAILABLE_SMTP,
            self::REASON_UNEXPECTED_ERROR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : false;
        $this->container['free'] = isset($data['free']) ? $data['free'] : false;
        $this->container['disposable'] = isset($data['disposable']) ? $data['disposable'] : false;
        $this->container['accept_all'] = isset($data['accept_all']) ? $data['accept_all'] : false;
        $this->container['did_you_mean'] = isset($data['did_you_mean']) ? $data['did_you_mean'] : 'null';
        $this->container['sendex'] = isset($data['sendex']) ? $data['sendex'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : true;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['result'] === null) {
            $invalidProperties[] = "'result' can't be null";
        }
        $allowedValues = $this->getResultAllowableValues();
        if (!in_array($this->container['result'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'result', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        $allowedValues = $this->getReasonAllowableValues();
        if (!in_array($this->container['reason'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['role'] === null) {
            $invalidProperties[] = "'role' can't be null";
        }
        if ($this->container['free'] === null) {
            $invalidProperties[] = "'free' can't be null";
        }
        if ($this->container['disposable'] === null) {
            $invalidProperties[] = "'disposable' can't be null";
        }
        if ($this->container['accept_all'] === null) {
            $invalidProperties[] = "'accept_all' can't be null";
        }
        if ($this->container['did_you_mean'] === null) {
            $invalidProperties[] = "'did_you_mean' can't be null";
        }
        if ($this->container['sendex'] === null) {
            $invalidProperties[] = "'sendex' can't be null";
        }
        if (($this->container['sendex'] > 1)) {
            $invalidProperties[] = "invalid value for 'sendex', must be smaller than or equal to 1.";
        }

        if (($this->container['sendex'] < 0)) {
            $invalidProperties[] = "invalid value for 'sendex', must be bigger than or equal to 0.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        if ($this->container['success'] === null) {
            $invalidProperties[] = "'success' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['result'] === null) {
            return false;
        }
        $allowedValues = $this->getResultAllowableValues();
        if (!in_array($this->container['result'], $allowedValues)) {
            return false;
        }
        if ($this->container['reason'] === null) {
            return false;
        }
        $allowedValues = $this->getReasonAllowableValues();
        if (!in_array($this->container['reason'], $allowedValues)) {
            return false;
        }
        if ($this->container['role'] === null) {
            return false;
        }
        if ($this->container['free'] === null) {
            return false;
        }
        if ($this->container['disposable'] === null) {
            return false;
        }
        if ($this->container['accept_all'] === null) {
            return false;
        }
        if ($this->container['did_you_mean'] === null) {
            return false;
        }
        if ($this->container['sendex'] === null) {
            return false;
        }
        if ($this->container['sendex'] > 1) {
            return false;
        }
        if ($this->container['sendex'] < 0) {
            return false;
        }
        if ($this->container['email'] === null) {
            return false;
        }
        if ($this->container['user'] === null) {
            return false;
        }
        if ($this->container['domain'] === null) {
            return false;
        }
        if ($this->container['message'] === null) {
            return false;
        }
        if ($this->container['success'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result The verification result.
     *
     * @return $this
     */
    public function setResult($result)
    {
        $allowedValues = $this->getResultAllowableValues();
        if (!in_array($result, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'result', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason The reason for the result.
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!in_array($reason, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets role
     *
     * @return bool
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param bool $role true if the email address is a role address, e.g. \"postmaster@example.com\" or \"support@example.com\")
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets free
     *
     * @return bool
     */
    public function getFree()
    {
        return $this->container['free'];
    }

    /**
     * Sets free
     *
     * @param bool $free true if the email address uses a free service such as gmail.com or yahoo.com
     *
     * @return $this
     */
    public function setFree($free)
    {
        $this->container['free'] = $free;

        return $this;
    }

    /**
     * Gets disposable
     *
     * @return bool
     */
    public function getDisposable()
    {
        return $this->container['disposable'];
    }

    /**
     * Sets disposable
     *
     * @param bool $disposable true if the email address uses a disposable domain, like trashmail.com or mailinator.com
     *
     * @return $this
     */
    public function setDisposable($disposable)
    {
        $this->container['disposable'] = $disposable;

        return $this;
    }

    /**
     * Gets accept_all
     *
     * @return bool
     */
    public function getAcceptAll()
    {
        return $this->container['accept_all'];
    }

    /**
     * Sets accept_all
     *
     * @param bool $accept_all true if the email was accepted, but the domain appears to accept all emails addressed to that domain
     *
     * @return $this
     */
    public function setAcceptAll($accept_all)
    {
        $this->container['accept_all'] = $accept_all;

        return $this;
    }

    /**
     * Gets did_you_mean
     *
     * @return string
     */
    public function getDidYouMean()
    {
        return $this->container['did_you_mean'];
    }

    /**
     * Sets did_you_mean
     *
     * @param string $did_you_mean Returns a suggested email if a possible spelling error was detected. For example, \"bill.lumbergh@gamil.com\" would return a result of \"bill.lumbergh@gmail.com\"
     *
     * @return $this
     */
    public function setDidYouMean($did_you_mean)
    {
        $this->container['did_you_mean'] = $did_you_mean;

        return $this;
    }

    /**
     * Gets sendex
     *
     * @return float
     */
    public function getSendex()
    {
        return $this->container['sendex'];
    }

    /**
     * Sets sendex
     *
     * @param float $sendex A quality score of the provided email address ranging between 0 (no quality) and 1 (perfect quality). More information on the Sendex Score can be found at https://docs.kickbox.io/v2.0/docs/the-sendex
     *
     * @return $this
     */
    public function setSendex($sendex)
    {

        if (($sendex > 1)) {
            throw new \InvalidArgumentException('invalid value for $sendex when calling VerifyResponse., must be smaller than or equal to 1.');
        }
        if (($sendex < 0)) {
            throw new \InvalidArgumentException('invalid value for $sendex when calling VerifyResponse., must be bigger than or equal to 0.');
        }

        $this->container['sendex'] = $sendex;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email A normalized version of the provided email address. For instance, \"BoB@example.com\" returns a result of \"bob@example.com\"
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user The user (also known as the local part) of the provided email address. For example, \"bob@example.com\" results in \"bob\"
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain The domain part of the email address. For instance, \"bob@example.com\" results in \"example.com\"
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Additional information from the server
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets success
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool $success true if the API request did not result in any unexpected errors
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

