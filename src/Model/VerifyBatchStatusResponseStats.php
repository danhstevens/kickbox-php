<?php
/**
 * VerifyBatchStatusResponseStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Kickbox
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kickbox
 *
 * Kickbox API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Kickbox\Model;

use \ArrayAccess;
use \Kickbox\ObjectSerializer;

/**
 * VerifyBatchStatusResponseStats Class Doc Comment
 *
 * @category Class
 * @description Final job results stats
 * @package     Kickbox
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VerifyBatchStatusResponseStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VerifyBatchStatusResponse_stats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deliverable' => 'int',
        'undeliverable' => 'int',
        'risky' => 'int',
        'unknown' => 'int',
        'sendex' => 'float',
        'addresses' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deliverable' => null,
        'undeliverable' => null,
        'risky' => null,
        'unknown' => null,
        'sendex' => 'float',
        'addresses' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deliverable' => 'deliverable',
        'undeliverable' => 'undeliverable',
        'risky' => 'risky',
        'unknown' => 'unknown',
        'sendex' => 'sendex',
        'addresses' => 'addresses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deliverable' => 'setDeliverable',
        'undeliverable' => 'setUndeliverable',
        'risky' => 'setRisky',
        'unknown' => 'setUnknown',
        'sendex' => 'setSendex',
        'addresses' => 'setAddresses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deliverable' => 'getDeliverable',
        'undeliverable' => 'getUndeliverable',
        'risky' => 'getRisky',
        'unknown' => 'getUnknown',
        'sendex' => 'getSendex',
        'addresses' => 'getAddresses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deliverable'] = isset($data['deliverable']) ? $data['deliverable'] : null;
        $this->container['undeliverable'] = isset($data['undeliverable']) ? $data['undeliverable'] : null;
        $this->container['risky'] = isset($data['risky']) ? $data['risky'] : null;
        $this->container['unknown'] = isset($data['unknown']) ? $data['unknown'] : null;
        $this->container['sendex'] = isset($data['sendex']) ? $data['sendex'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets deliverable
     *
     * @return int
     */
    public function getDeliverable()
    {
        return $this->container['deliverable'];
    }

    /**
     * Sets deliverable
     *
     * @param int $deliverable deliverable
     *
     * @return $this
     */
    public function setDeliverable($deliverable)
    {
        $this->container['deliverable'] = $deliverable;

        return $this;
    }

    /**
     * Gets undeliverable
     *
     * @return int
     */
    public function getUndeliverable()
    {
        return $this->container['undeliverable'];
    }

    /**
     * Sets undeliverable
     *
     * @param int $undeliverable undeliverable
     *
     * @return $this
     */
    public function setUndeliverable($undeliverable)
    {
        $this->container['undeliverable'] = $undeliverable;

        return $this;
    }

    /**
     * Gets risky
     *
     * @return int
     */
    public function getRisky()
    {
        return $this->container['risky'];
    }

    /**
     * Sets risky
     *
     * @param int $risky risky
     *
     * @return $this
     */
    public function setRisky($risky)
    {
        $this->container['risky'] = $risky;

        return $this;
    }

    /**
     * Gets unknown
     *
     * @return int
     */
    public function getUnknown()
    {
        return $this->container['unknown'];
    }

    /**
     * Sets unknown
     *
     * @param int $unknown unknown
     *
     * @return $this
     */
    public function setUnknown($unknown)
    {
        $this->container['unknown'] = $unknown;

        return $this;
    }

    /**
     * Gets sendex
     *
     * @return float
     */
    public function getSendex()
    {
        return $this->container['sendex'];
    }

    /**
     * Sets sendex
     *
     * @param float $sendex sendex
     *
     * @return $this
     */
    public function setSendex($sendex)
    {
        $this->container['sendex'] = $sendex;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return int
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param int $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

